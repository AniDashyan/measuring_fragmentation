name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        enable_jemalloc: [ON, OFF]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          - os: windows-latest
            enable_jemalloc: ON  # Skip jemalloc on Windows

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install pkg-config and jemalloc (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.enable_jemalloc == 'ON'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libjemalloc-dev

    - name: Install jemalloc (macOS)
      if: matrix.os == 'macos-latest' && matrix.enable_jemalloc == 'ON'
      run: |
        brew install jemalloc

    - name: Configure CMake
      run: |
        cmake -B "${{ steps.strings.outputs.build-output-dir }}" \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DUSE_JEMALLOC=${{ matrix.enable_jemalloc }} \
              -S "${{ github.workspace }}"

    - name: Build
      run: cmake --build "${{ steps.strings.outputs.build-output-dir }}" --config ${{ matrix.build_type }}

    - name: Run Executable
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        executable="frag_test"
        if [ "$RUNNER_OS" = "Windows" ]; then
          path="./${{ matrix.build_type }}/${executable}.exe"
        else
          path="./${executable}"
        fi

        if [ -f "$path" ]; then
          echo "Running $path"
          "$path" || exit 0
        else
          echo "Executable not found: $path"
          exit 1
        fi
