name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        enable_jemalloc: [ON, OFF]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: windows-latest
            enable_jemalloc: ON # jemalloc not supported on Windows

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Set build output path
      id: vars
      run: echo "build_dir=${{ github.workspace }}/build" >> $GITHUB_OUTPUT
      shell: bash

    - name: Install jemalloc on Linux
      if: matrix.os == 'ubuntu-latest' && matrix.enable_jemalloc == 'ON'
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libjemalloc-dev

    - name: Install jemalloc on macOS
      if: matrix.os == 'macos-latest' && matrix.enable_jemalloc == 'ON'
      run: brew install jemalloc pkg-config

    - name: Configure CMake (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        cmake -B "${{ steps.vars.outputs.build_dir }}" \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DUSE_JEMALLOC=${{ matrix.enable_jemalloc }} \
              -S .
      shell: bash

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: |
        cmake -B "${{ steps.vars.outputs.build_dir }}" `
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
              -DUSE_JEMALLOC=${{ matrix.enable_jemalloc }} `
              -S .
      shell: pwsh

    - name: Build
      run: cmake --build "${{ steps.vars.outputs.build_dir }}" --config ${{ matrix.build_type }}

    - name: Run Executable
      working-directory: ${{ steps.vars.outputs.build_dir }}
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          executable="${{ matrix.build_type }}\\frag_test.exe"
        else
          executable="./frag_test"
        fi

        if [ -f "$executable" ]; then
          echo "Executable found at $executable"
          "$executable" || true
        else
          echo "Executable not found: $executable"
          exit 1
        fi
      shell: bash
